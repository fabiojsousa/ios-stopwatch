{"version":3,"sources":["App/styles.js","styles/global.js","index.js","App/index.js"],"names":["Container","styled","div","props","reseted","running","lap","Scroll","PerfectScrollBar","createGlobalStyle","ReactDOM","render","useState","isRunning","setIsRunning","newInterval","setNewInterval","timeElapsed","setTimeElapsed","format","duration","setDuration","startTime","setStartTime","timer","setTimer","setLap","newLap","setNewLap","time","allSec","min","Math","floor","sec","msec","toFixed","substring","allData","totalTime","minutes","seconds","miliseconds","formatedTime","useEffect","setInterval","tElapsed","Date","now","id","className","type","onClick","index","length","clearInterval","options","maxScrollbarLength","document","getElementById"],"mappings":"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","file":"static/js/main.65a74143.chunk.js","sourcesContent":["import styled from 'styled-components';\r\nimport PerfectScrollBar from 'react-perfect-scrollbar';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  height: 100%;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 0 5px;\r\n  margin: 0 auto;\r\n\r\n  main {\r\n    max-width: 800px;\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n\r\n\r\n    #stopwatch {\r\n      color: #ffffff;\r\n      margin-bottom: 60px;\r\n      text-align: center;\r\n      /* padding-left: 15px; */\r\n\r\n      h1 {\r\n        font-weight: normal;\r\n        font-size: 85px;\r\n      }\r\n    }\r\n\r\n    #buttons {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      padding: 0 35px;\r\n\r\n      div {\r\n        position: relative;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n\r\n        button {\r\n          width: 60px;\r\n          height: 60px;\r\n          border-radius: 50%;\r\n          border: 2px solid black;\r\n        }\r\n      }\r\n\r\n      div.leftButton {\r\n        button {\r\n          background-color: ${props => props.reseted === 'no' ? '#333333' : '#1C1C1E'};\r\n          color: ${props => props.reseted === 'no' ? '#ffffff' : '#999999'};\r\n          font-weight: 500;\r\n          box-shadow: 0px 0px 0px 2px ${props => props.reseted === 'no' ? '#333333' : '#1C1C1E'} ;\r\n\r\n          :active {\r\n          background-color: ${props => props.reseted === 'no' ? '#1B1B1B' : '#0F0F11'};\r\n            box-shadow: 0px 0px 0px 2px ${props => props.reseted === 'no' ? '#1B1B1B' : '#0F0F11'};\r\n          }\r\n        }\r\n      }\r\n\r\n      div.rightButton {\r\n        button {\r\n          background-color: ${props => props.running === 'on' ? '#330000' : '#003300'};\r\n          color: ${props => props.running === 'on' ? '#cc6633' : '#66cc66'};\r\n          font-weight: 500;\r\n          box-shadow: 0px 0px 0px 2px ${props => props.running === 'on' ? '#330000' : '#003300'};\r\n        }\r\n      }\r\n    }\r\n\r\n    #laps {\r\n      width: 400px;\r\n      margin-top: 20px;\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      justify-content: center;\r\n      height: 285px;\r\n      p {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        color: ${props => props.lap && props.lap === 'best' ? 'green' : props.lap === 'worse' ? 'red' : '#ffffff'};\r\n        width: 100%;\r\n        padding: 10px 0;\r\n        border: 1px solid #333333;\r\n        border-left: 0;\r\n        border-right: 0;\r\n\r\n        span {\r\n          height: 17px;\r\n        }\r\n      }\r\n      p + p {\r\n        border: 1px solid #333333;\r\n        border-left: 0;\r\n        border-right: 0;\r\n        border-top: 0;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Scroll = styled(PerfectScrollBar)`\r\n  width: 100%;\r\n  padding: 0 35px;\r\n`\r\n","import { createGlobalStyle } from 'styled-components';\r\nimport 'react-perfect-scrollbar/dist/css/styles.css';\r\n\r\nexport default createGlobalStyle`\r\n\r\n    *{\r\n        margin: 0;\r\n        padding: 0;\r\n        outline: 0;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *:focus{\r\n        outline: 0;\r\n    }\r\n\r\n    html, body, #root {\r\n        height: 100%;\r\n    }\r\n\r\n    body{\r\n        -webkit-font-smoothing: antialiased;\r\n        background-color: #000000;\r\n    }\r\n\r\n    body, input, button {\r\n        font: 14px 'Roboto', sans-serif;\r\n    }\r\n\r\n    button{\r\n        cursor: pointer;\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport Global from './styles/global';\r\n\r\nReactDOM.render(\r\n  <>\r\n    <Global />\r\n    <App />\r\n  </>,\r\n  document.getElementById('root')\r\n);\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport { Container, Scroll } from './styles';\r\n\r\nexport default function App() {\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [newInterval, setNewInterval] = useState(false);\r\n  const [timeElapsed, setTimeElapsed] = useState(0);\r\n  const [duration, setDuration] = useState(format(timeElapsed));\r\n  const [startTime, setStartTime] = useState();\r\n  const [timer, setTimer] = useState();\r\n  const [lap, setLap] = useState([]);\r\n  const [newLap, setNewLap] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (newInterval && isRunning) {\r\n      setTimer(\r\n        setInterval(() => {\r\n          const tElapsed =\r\n            timeElapsed > 0\r\n              ? Date.now() - startTime + timeElapsed\r\n              : Date.now() - startTime;\r\n          setTimeElapsed(tElapsed);\r\n        }, 10)\r\n      );\r\n      setNewInterval(false);\r\n    }\r\n  }, [isRunning, newInterval, timeElapsed, startTime, newLap]);\r\n\r\n  useEffect(() => {\r\n    setDuration(format(timeElapsed));\r\n  }, [timeElapsed]);\r\n\r\n  useEffect(() => {\r\n    const nLap = newLap + 10;\r\n    timeElapsed && setNewLap(nLap);\r\n  }, [timeElapsed]);\r\n\r\n  function start() {\r\n    setIsRunning(true);\r\n    setStartTime(Date.now());\r\n    setNewInterval(true);\r\n  }\r\n\r\n  function stop() {\r\n    setIsRunning(false);\r\n    clearInterval(timer);\r\n  }\r\n\r\n  function reset() {\r\n    clearInterval(timer);\r\n    setTimeElapsed(0);\r\n    setLap([]);\r\n    setNewLap(0);\r\n    setIsRunning(false);\r\n    setNewInterval(true);\r\n  }\r\n\r\n  function format(time) {\r\n    const allSec = time / 1000;\r\n    const min = Math.floor(allSec / 60);\r\n    const sec = Math.floor(allSec % 60);\r\n    const msec = (allSec % 1).toFixed(2).substring(2);\r\n\r\n    let allData = {\r\n      totalTime: allSec,\r\n      minutes: min >= 10 ? min : `0${min}`,\r\n      seconds: sec >= 10 ? sec : `0${sec}`,\r\n      miliseconds: msec,\r\n    };\r\n\r\n    allData.formatedTime = `${allData.minutes}:${allData.seconds}.${allData.miliseconds}`;\r\n\r\n    return allData;\r\n  }\r\n\r\n  function createNewLap() {\r\n    setLap([{ index: lap.length + 1, time: format(newLap) }, ...lap]);\r\n    setNewLap(0);\r\n  }\r\n\r\n  return (\r\n    <Container running={isRunning && 'on'} reseted={timeElapsed > 0 && 'no'}>\r\n      <main>\r\n        <div id=\"stopwatch\">\r\n          <h1>\r\n            {duration.minutes}:{duration.seconds}.{duration.miliseconds}\r\n          </h1>\r\n        </div>\r\n        <div id=\"buttons\">\r\n          <div className=\"leftButton\">\r\n            <button type=\"button\" onClick={isRunning ? createNewLap : reset}>\r\n              {isRunning ? 'Lap' : timeElapsed > 0 ? 'Reset' : 'Lap'}\r\n            </button>\r\n          </div>\r\n          <div className=\"rightButton\">\r\n            <button type=\"button\" onClick={isRunning ? stop : start}>\r\n              {isRunning ? 'Stop' : 'Start'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div id=\"laps\">\r\n          <Scroll options={{ maxScrollbarLength: 80 }}>\r\n            <p>\r\n              <span>{timeElapsed > 0 && `Lap ${lap.length + 1}`}</span>\r\n              <span>{timeElapsed > 0 && format(newLap).formatedTime}</span>\r\n            </p>\r\n            <p>\r\n              <span>{lap[0] && `Lap ${lap[0].index}`}</span>\r\n              <span>{lap[0] && `${lap[0].time.formatedTime}`}</span>\r\n            </p>\r\n            <p>\r\n              <span>{lap[1] && `Lap ${lap[1].index}`}</span>\r\n              <span>{lap[1] && `${lap[1].time.formatedTime}`}</span>\r\n            </p>\r\n            <p>\r\n              <span>{lap[2] && `Lap ${lap[2].index}`}</span>\r\n              <span>{lap[2] && `${lap[2].time.formatedTime}`}</span>\r\n            </p>\r\n          </Scroll>\r\n        </div>\r\n      </main>\r\n    </Container>\r\n  );\r\n}\r\n"],"sourceRoot":""}